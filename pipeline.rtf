{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fmodern\fcharset0 Courier;\f4\fnil\fcharset0 Consolas;\f5\froman\fcharset0 TimesNewRomanPSMT;
}
{\colortbl;\red255\green255\blue255;\red5\green68\blue254;\red0\green0\blue255;\red0\green61\blue204;
\red252\green39\blue18;\red174\green0\blue240;\red103\green103\blue103;\red174\green0\blue240;\red0\green0\blue0;
\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red251\green2\blue7;\red0\green0\blue255;
\red198\green50\blue253;\red154\green154\blue154;\red255\green255\blue255;\red128\green128\blue128;\red179\green179\blue179;
\red252\green73\blue64;\red134\green205\blue77;\red102\green177\blue50;\red27\green29\blue31;\red217\green11\blue5;
\red252\green118\blue111;\red9\green80\blue208;\red46\green111\blue253;}
{\*\expandedcolortbl;;\cssrgb\c0\c38136\c99824;\cssrgb\c1680\c19835\c100000;\csgenericrgb\c0\c23922\c80000;
\cssrgb\c100000\c25271\c7591;\csgenericrgb\c68235\c0\c94118;\csgenericrgb\c40392\c40392\c40392;\cssrgb\c74609\c21796\c95404;\csgray\c0\c0;
\csgray\c100000;\csgray\c0;\cssrgb\c0\c0\c0;\cssrgb\c100000\c14913\c0;\cssrgb\c1680\c19835\c100000;
\cssrgb\c82670\c34053\c99466;\csgray\c66775;\cssrgb\c100000\c100000\c100000;\csgray\c57415;\csgray\c75407;
\cssrgb\c100000\c38374\c31601;\cssrgb\c58755\c82661\c37297;\cssrgb\c46532\c73327\c25364;\cssrgb\c14118\c15294\c16078;\cssrgb\c88946\c14202\c0;
\cssrgb\c100000\c55025\c50890;\cssrgb\c0\c41176\c85098;\cssrgb\c22750\c53231\c99501;}
\paperw11900\paperh16840\margl1440\margr1440\vieww32960\viewh18980\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf2 ############################################################################################################################################################################################################\
#\
# 
\b  Pipeline designed for a Linux cluster (Genotoul, http://bioinfo.genotoul.fr/) managed with SLURM [https://slurm.schedmd.com/overview.html]. \
#  Some adaptations may be required for other cluster management and job scheduling systems\
#\
# - library prepation followed Farigoule et al. target locus = leuA\
# - example raw data are MiSeq paired end reads demultiplexed by the MiSeq instrument (Illumina SAV)\
# - construction after demultiplexing <=> ForwardPrimer----target gene------ReversePrimer
\b0 \
############################################################################################################################################################################################################\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\cf3 #last update : May 18, 2022 by AC\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#Preliminary notes\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf2 ### comments are in 
\b blue 
\b0 and start with hash (#); everything the shell encounters after a hash mark on a line is ignored\
### parts of the cmd you have/may want to change are in\cf0  
\b \cf5 red
\b0 \cf4 \
\cf2 ### important notes /warnings are in\cf4  
\b \cf6 purple\

\b0 \cf2 ### software parameters are in \cf7 grey
\b \cf6 \

\b0 \cf2 ### a full understanding of this pipeline requires basic knowledge of the awk programming language as scripts are created upfront with awk to be run on all samples in parallel
\b \cf6 \
\pard\pardeftab720\partightenfactor0
\cf8 ### 
\f1\fs24 \cb9 \CocoaLigature0 DO NOT PAY ATTENTION TO THE FOLLOWING TYPE OF WARNING MESSAGE, WHICH IS GENERATED BY AWK, YOU ARE TOTALLY FINE \
\pard\pardeftab720\partightenfactor0

\f2\b0 \cf8 "awk: warning: escape sequence `\\/' treated as plain `/'.
\fs22 \cb10 "
\fs24 \cf11 \cb9 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### note that you will have to create SLURM scripts. I use the text editor "nano".\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #the following cmd will open an empty sheet\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 nano myscript.sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
#in which you need to paste the content of the block materialized by dashes (Ctrl+C / Ctrl+V)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs20 \cf12 #-------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs22 \cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J \cf13 \cb10 myjob\cf12             \cf14 #job name\cf11 \cb10 \
#SBATCH -p \cf13 \cb10 workq\cf11 \cb10             \cf14 \cb10 #queue\cf11 \cb10 \
#SBATCH -t \cf5 \cb10 20:00            \cf14 #running time\cf11 \cb10 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb9 #SBATCH --cpus-per-task=
\f1\b \cf5 2   
\f2\b0 \cf14 #n CPUs to be used \cf11 \
#SBATCH --mem-per-cpu=\cf5 4\cf13 G
\fs20 \cf12 \cb1 \CocoaLigature1     \cf14 #memory to be used by each CPU\cf12 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf13 command with options\cf12  \
\
#-------------------------------
\f0\fs28 \cf2 \
#to get out of nano and save your script as "myscript.sh", you need to tip Ctrl+X\
#then you must follow instructions at the bottom of the terminal window to save your file\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb9 # Required softwares\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb1 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
#Note that all softwares have been installed on a dedicated module/directory of our cluster\
#scripts load softwares from that module and, then, execute programs\
#example\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs24 \cf12 \cb9 \CocoaLigature0 module load bioinfo/FastQC_v0.11.7  \cf14 #load directory that contain FASTQC executables\cf13 \
\cf0 \cb1 \CocoaLigature1 fastqc myfile.fastq   \cf14 #execute fastqc\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf15 #you must adapt path to softwares (highligthed in red in the pipeline) to your own directory structure\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf2 #the following softwares are required to run the pipeline :\
\
#FASTQC\
\pard\pardeftab720\li720\fi-720\partightenfactor0
\cf14 \cb9 #Andrews S. 2010. FastQC - A Quality Control application for FastQ files. Available from {\field{\*\fldinst{HYPERLINK "https://www.bioinformatics.babraham.ac.uk/projects/fastqc/."}}{\fldrslt https://www.bioinformatics.babraham.ac.uk/projects/fastqc/.}}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf2 \cb1 \
#\cf4 Trimmomatic\
#Bolger AM, Lohse M, and Usadel B. 2014. Trimmomatic: a flexible trimmer for Illumina sequence data. Bioinformatics 30:2114-2120. \
\cf2 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf14 #\cf4 FLASH\
#Magoc T, and Salzberg SL. 2011. FLASH: fast length adjustment of short reads to improve genome assemblies. Bioinformatics 27:2957-2963. 10.1093/bioinformatics/btr507\
\
#VSEARCH\
#Rognes T, Flouri T, Nichols B, Quince C, and Mah\'e9 F. 2016. VSEARCH: a versatile open source tool for metagenomics. Peerj 4:e2584. 10.7717/peerj.2584\
\
\pard\pardeftab720\partightenfactor0
\cf4 #SWARM\
#Mahe F, Rognes T, Quince C, de Vargas C, and Dunthorn M. 2015. Swarm v2: highly-scalable and high-resolution amplicon clustering. Peerj 3. e142010.7717/peerj.1420\
\
#USEARCH\
#Edgar,RC (2010) Search and clustering orders of magnitude faster than BLAST, Bioinformatics 26(19), 2460-2461. doi: 10.1093/bioinformatics/btq461\
\
#MAFFT\
#Katoh K, and Standley DM. 2013. MAFFT multiple sequence alignment software version 7: improvements in performance and usability. Molecular Biology and Evolution 30:772-780. \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Create Datadir and copy raw data to datadir\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 mkdir \cf5 datadir\cf11 \cb10 \
\
\cf12 \cb10 cd \cf5 datadir
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #copy all your *.fastq.gz files to datadir\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf15 #if you want to test the pipeline on example data copy the content of the example directory to your datadir and run the pipeline in datadir\cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Sample code format\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
#We manage a lot of samples for different type of experiments. \
#To make our life easier and pipelines as generic as possible we have adopted a fixed format for sample codes : two alphanumeric strings separated with an underscore "_" \
#I guarantee that the pipeline will work if you use sample codes formatted following our sample code format \
#if you have another way of formatting your sample codes it may fail (especially if you have ".", space, "," or any strange characters in your sample codes ("-" should be avoided too).\
#Note that for processing NGS data with Linux is not recommended to have punctuation marks in sample codes\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \cb9 #\cf8 Expected input filename format is as follows :\cf2  
\b \cf15 XXXX_XXXX_S*_L001_R*_001.fastq.gz whatever the number of alphanumeric characters behind XXXX \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf2 \cb1 #For example here :\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 #JRAS07930_0104_S101_L001_R1_001.fastq.gz  \cf14 \cb10 #sample code = JRAS07930_0104; 101=sample ID on the sample sheet; forward reads (R1)\cf12 \cb10 \
#JRAS07930_0104_S101_L001_R2_001.fastq.gz  \cf14 \cb10 #sample code = JRAS07930_0104; 101=sample ID on the sample sheet; reverse reads (R2)
\f0\fs28 \cf12 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \cb9 \
### Nota if needed : to convert dash "-" to underscore "_" in filenames \cf0 \
\pard\pardeftab720\sl280\partightenfactor0

\f3\fs24 \cf12 \expnd0\expndtw0\kerning0
for i in *.fastq.gz\
do \
mv $i ./"$(echo $i | sed 's/-/_/g')"\
done\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sl320\partightenfactor0

\f4\fs26 \cf12 \cb1 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \kerning1\expnd0\expndtw0 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Chek if sample codes are unique and count samples\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\sl320\partightenfactor0

\f4\fs26 \cf12 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### chek if sample codes are uniq (cmd to be adapted if you do not work with our sample code format)
\f4\fs26 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl320\partightenfactor0
\cf12 ls *.fastq.gz |awk -F'_' '\{print $1"_"$2\}' |sort |uniq -c |awk '\{if($1>2) \{print\}\}'   \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 #you should get the prompt back if all sample codes are unique. If a sample code appears more that once it is printed on screen together with the nb of occurences\cf12 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### count samples (cmd to be adapted if you do not work with our sample code format)
\f4\fs26 \cf12 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl320\partightenfactor0
\cf12 ls *.fastq.gz |awk -F'_' '\{print $1"_"$2\}' |sort |uniq |wc -l \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \kerning1\expnd0\expndtw0 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Gunzip fastq.gz files\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\
\pard\pardeftab720\partightenfactor0
\cf8 # I voluntary do not create one script per input .fastq.gz file as you may have many samples.\
# To speed up a bit the process I create one script for R1 and another for R2\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 ### list .fastq.gz files\
#R1
\f2\fs22 \cf0 \
ls *\cf11 \cb10 \CocoaLigature0 _R1_*\cf0 \cb1 \CocoaLigature1 .fastq.gz > myR1files
\f0 \

\fs28 \cf2 #R2\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 ls *\cf11 \cb10 \CocoaLigature0 _R2_*\cf0 \cb1 \CocoaLigature1 .fastq.gz > myR2files
\f0 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \
### prepare scripts \
#R1
\f2\fs24 \cf11 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J gunzip\\n#SBATCH -p workq\\n#SBATCH -t \cf5 30:00\cf11 \\n\\n"\} \{print "\cf0 \cb1 \CocoaLigature1 gunzip "$1\cf11 \cb9 \CocoaLigature0 \}' myR1files >> gunzipR1.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #R2\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs24 \cf11 \cb9 \CocoaLigature0 awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J gunzip\\n#SBATCH -p workq\\n#SBATCH -t \cf5 30:00\cf11 \\n\\n"\} \{print "\cf0 \cb1 \CocoaLigature1 gunzip "$1\cf11 \cb9 \CocoaLigature0 \}' myR2files >> gunzipR2.sh\
\pard\pardeftab720\partightenfactor0
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### run scripts\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 sbatch gunzipR1.sh
\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f2\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 sbatch gunzipR2.sh
\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### monitor jobs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 \cb10 username\cf11 \cb10 "\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash
\f0\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### count outputs\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *\cf12 \cb9 .fastq |wc -l \cf2 #should be equal to 2x the nb of samples\cf12  \cf11 \cb10 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf11 \cb9 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cleaning (once job are finished)\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 rm \cf11 \cb10 \CocoaLigature0 gunzip*.sh myR1files myR2files slurm-*\cf0 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \
\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Quality of the sequencing run (FastQC + custom scripts)\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 ### concatenate all reads1 and all reads2\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf12 cat *_R1_*.fastq > allR1.fastq\
cat *_R2_*.fastq > allR2.fastq\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### list files\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 ls all*.fastq > myfiles
\f0 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 ### prepare cmd to tun FastQC \cf8 (change path to your version of FastQC. attention use a \\ in front of each /)\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs24 \cf11 \cb9 \CocoaLigature0 awk '\{print "#!\\/bin\\/bash\\n#SBATCH -J fastQC\\n#SBATCH -p workq\\n#SBATCH -t \cf12 01:00:00\cf11 \\n\\n\cf13 module load\cf11  \cf13 bioinfo\\/\cb1 \CocoaLigature1 FastQC_v0\\.11\\.7\cf11 \cb9 \CocoaLigature0 \\n\cf0 \cb1 \CocoaLigature1 fastqc "$1\cf11 \cb9 \CocoaLigature0 \}' myfiles >> tmp_cmd\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### split the cmd file to run fastQC on R1 and R2 in parallel (2 scripts are created)\
\pard\pardeftab720\sl280\partightenfactor0

\f3\fs24 \cf12 \expnd0\expndtw0\kerning0
awk '/
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #!
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 /\{filename="fastqc_"NR".sh"\}; \{print >filename\}' 
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 tmp_cmd\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### run all scripts\
\pard\pardeftab720\partightenfactor0
\cf2 \kerning1\expnd0\expndtw0 \ul \ulc2 # copy and paste the next 4 lines together in the terminal (from "for" to "done")\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \ulnone \CocoaLigature0 for i in fastqc_*.sh\
do\
sbatch $i\
done
\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### monitor jobs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 username\cf11 "\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \kerning1\expnd0\expndtw0 ### cleaning (once jobs are finished)\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 rm \cf11 \cb10 \CocoaLigature0 fastqc_*.sh tmp_cmd myfiles slurm-*\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### copy resulting html files to your computer and open with a web browser\
### the following link will help you to interpret FastQC results\
\pard\pardeftab720\partightenfactor0
\cf0 http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/\
\pard\pardeftab720\partightenfactor0
\cf2 ### record the number of PF (passing filter reads)\
### analyse profiles to make sure sequencing ran properly\
### \ul OPTIONAL \ulnone : to calculate the nb of reads with  Qc > 20, 30 etc, you need to use the fastqc.zip files\
# unzip \
# open the fastqc_data.txt file\
# search for "Per sequence quality scores"  (exact match)\
# the sum of the reads should match the nb of PF reads\
# sum over reads with QC > 20 or 30 depending on what you need\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 ### \cf8 cleaning to save disk space !!!\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf12 rm allR1.fastq\
rm allR2.fastq
\f0\fs28 \cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Trimmomatic : adapter trimming + selection of good quality paired reads\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf8 ###You need to create your "adapter file"\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf8 \cb10 \CocoaLigature0 #Our sequencing adapters are in the file adapters.fas\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### create sample list\
\pard\pardeftab720\sl320\partightenfactor0

\f4\fs26 \cf12 ls *.fastq |awk -F'_' '\{print $1"_"$2\}' |sort |uniq > mysamples
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### create script \cf8 \kerning1\expnd0\expndtw0 (change path to your version of Trimmomatic. attention use a \\ in front of each /)\cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf14 \kerning1\expnd0\expndtw0 #I voluntary do not create one script per input R1+R2  file as you may have many samples.\
\pard\pardeftab720\partightenfactor0
\cf8 #note that you should set 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 MINLEN\cf11  
\f0\fs28 \cf8 \cb1 \CocoaLigature1 to a value that is compatible with your read length + the size of your sequencing products (forwardprimer----amplicon------reverseprimer)\
\pard\pardeftab720\partightenfactor0
\cf14 #you may run trimmomatic with different value of\cf8  
\f2\fs22 \cf5 \cb10 \CocoaLigature0 MINLEN 
\f0\fs28 \cf8 \cb1 \CocoaLigature1 a\cf14 nd test if results are changing or not (note that you should go at least to the FLASH step to figure out if it impacts the results)\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J trimmomatic \\n#SBATCH -p \cf5 workq\cf11 \\n#SBATCH -t \cf5 2:00:00\cf11 \\n#SBATCH --cpus-per-task=
\f1\b \cf5 2
\f2\b0 \cf11 \\n#SBATCH --mem-per-cpu=\cf5 4\cf11 G\\n\\n\cf13 \cb10 module load\cf11  \cf13 bioinfo\\/Trimmomatic-0.36\cf11 \cb9 \\n"\} \{print "\cb10 java -jar \\$TRIM_HOME\\/trimmomatic.jar PE -phred33\cb9  "$1"_*\cf5 _R1_001.fastq\cf12  "$1"\cf11 _*\cf5 _R2_001.fastq\cf12  "$1"_R1_paired.fastq.gz "$1"_R1_unpaired.fastq.gz "$1"_R2_paired.fastq.gz "$1"_R2_unpaired.fastq.gz\cf5  \cf11 \cb10 ILLUMINACLIP:\cf5 adapters.fas\cf11 :2:30:10:8:true LEADING:\cf5 20\cf11  TRAILING:\cf5 20\cf11  SLIDINGWINDOW:4:\cf5 20\cf11  MINLEN:\cf5 200\cf11 \cb9 "\}' 
\f4\fs26 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 mysamples
\f2\fs22 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0  >> trimmomatic.sh  \cf14 \cb10 #note : usually I set quality parameters to 20 [below 20 = 1% error rate]\cf11 \cb9 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf7 #note on parameters:\
# by default, the parameters in the script will : \
# Remove adapters \
# Remove leading bases below quality 20 (LEADING:20) \
# Remove trailing bases below quality 20 (TRAILING:20)\
# Scan the read with a 4-base wide sliding window, cutting when the average quality per base drops below 20 (SLIDINGWINDOW:4:20) \
# Drop reads below 200 bases long (MINLEN:200) \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### run script\cf0 \
\pard\pardeftab720\sl280\partightenfactor0

\f3\fs24 \cf12 sbatch
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 trimmomatic
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .sh\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ###  \kerning1\expnd0\expndtw0 monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf12 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf2 ### outputs = \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf12 \cb9 R1_paired.fastq.gz    \cf2 #good quality R1 for which a good quality R2 was found\cf11 \cb10 \
$samplecode_\cf12 \cb9 R2_paired.fastq.gz    \cf2 #good quality R2 for which a good quality R1 was found \cf11 \cb10 \
$samplecode_\cf12 \cb9 R1_unpaired.fastq.gz  \cf2 #good quality R1 for which a good quality R2 was NOT found\cf11 \cb10 \
$samplecode_\cf12 \cb9 R2_unpaired.fastq.gz  \cf2 #good quality R2 for which a good quality R1 was NOT found\cf11 \cb10 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### count outputs =
\f2\fs22 \cf11 \cb10 \CocoaLigature0 \
ls *_\cf12 \cb9 R1_paired.fastq.gz |wc -l \cf2 #should be equal to the nb of samples\cf12  \cf11 \cb10 \
ls *_\cf12 \cb9 R2_paired.fastq.gz |wc -l \cf2 #should be equal to the nb of samples\cf11 \cb10 \
ls *_\cf12 \cb9 R1_unpaired.fastq.gz |wc -l \cf2 #should be equal to the nb of samples\cf11 \cb10 \
ls *_\cf12 \cb9 R2_unpaired.fastq.gz |wc -l \cf2 #should be equal to the nb of samples\
\pard\pardeftab720\partightenfactor0
\cf11 \cb10 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### summary statistics\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 grep "phred\\|Input" slurm-* |awk '\{ if($0~/phred/) \{print $2\} else print $4"\\t"$7"\\t"$12"\\t"$17"\\t"$20\}' |awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' |sed s/"_R1_001.fastq"/""/g |awk 'BEGIN\{print "samplecode\\tnPFpairedreads\\tR1R2ok\\tR1onlyok\\tR2onlyok\\tR1R2dropped"\} \{print $0\}' > trimmomatic_results\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### take a look to statistics to adjust parameters if you wish\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf12 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 more \cf11 trimmomatic_results\
\pard\pardeftab720\partightenfactor0

\fs20 \cf16 \cb17 \expnd0\expndtw0\kerning0
\CocoaLigature1 #meaning of columns:\
nPFpairedreads <=> Nb of pairs of R1R2 that passed Illumina Quality control (PF = Passing Filter)\
R1R2ok <=> Both Surviving: Nb of pairs of R1+R2 for which both reads R1 and R2 survived trimming (met all criteria you selected)\
R1onlyok <=> Forward Only Surviving: Nb of pairs of R1+R2 for which only R1 read was kept (R2 failed to pass one or more selection criteria after being trimmed)\
R2onlyok <=> Reverse Only Surviving: Nb of pairs of R1+R2 for which only R2 read was kept (R1 failed to pass one or more selection criteria after being trimmed)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf16 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 R1R2dropped\cb17 \expnd0\expndtw0\kerning0
\CocoaLigature1  <=> Dropped: Nb of pairs of R1+R2 that were removed. Neither R1/R2 satisfied selection criteria and pairs were entirely removed\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### cleaning 
\b if you want to re-run trimmomatic
\b0 \
#create datadir to store current results\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 mkdir \cf5 MINLEN200\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 #move outputs to datadir\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 mv *paired* \cf5 \cb9 MINLEN200\
\cf11 \cb10 mv trimmomatic_results \cf5 \cb9 MINLEN200\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 #delete useless files
\f2\fs22 \cf5 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm \cb10 trimmomatic.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### cleaning 
\b if you DO NOT want to re-run trimmomatic
\b0 \
#delete useless files
\f2\fs22 \cf5 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm \cb10 trimmomatic.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 #delete unpaired reads\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm *_\cf12 unpaired.fastq.gz    \cf8 #I do not pay attention to unpaired reads for now. I consider that it is safer to used paired reads.
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
#trash original raw reads to keep space \
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0

\b \cf10 \cb8 \CocoaLigature0 #REMEMBER / YOU MUST STORE YOUR RAW DATA ELSEWHERE !!!
\b0 \cf2 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb9 \CocoaLigature0 rm *.fastq\cb10 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
#gunzip paired fastq.gz files generated by trimmomatic\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 ### list .fastq.gz files\
# R1\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 ls *\cf5 R1\cb10 \CocoaLigature0 _paired.fastq.gz\cf0 \cb1 \CocoaLigature1  > myR1files\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 # R1\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 ls *\cf5 R2\cb10 \CocoaLigature0 _paired.fastq.gz\cf0 \cb1 \CocoaLigature1  > myR2files
\f0 \
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 ### prepare scripts\
# R1
\f2\fs24 \cf11 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J gunzip\\n#SBATCH -p workq\\n#SBATCH -t \cf5 30:00\cf11 \\n\\n"\} \{print "\cf0 \cb1 \CocoaLigature1 gunzip "$1\cf11 \cb9 \CocoaLigature0 \}' myR1files >> gunzipR1.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # R2\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs24 \cf11 \cb9 \CocoaLigature0 awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J gunzip\\n#SBATCH -p workq\\n#SBATCH -t \cf5 30:00\cf11 \\n\\n"\} \{print "\cf0 \cb1 \CocoaLigature1 gunzip "$1\cf11 \cb9 \CocoaLigature0 \}' myR2files >> gunzipR2.sh\
\pard\pardeftab720\partightenfactor0
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### run scripts\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 sbatch gunzipR1.sh
\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f2\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 sbatch gunzipR2.sh
\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 ### monitor jobs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 username\cf11 "\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash
\f0\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### count outputs\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *\cf12 \cb9 .fastq |wc -l \cf2 #should be equal to 2x the nb of samples\cf12  \cf11 \cb10 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cb9 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cleaning (once job are finished)\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 rm \cf11 \cb10 \CocoaLigature0 gunzip*.sh myR1files myR2files slurm-*\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#merge of overlapping reads with FLASH\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 #Here we will merge each pair of R1xR2 read\
\
### create a big cmd file \cf8 (change path to your version of FLASH. attention use a \\ in front of each /)\cf2 \
\pard\pardeftab720\partightenfactor0
\cf8 # I voluntary do not create one script per input R1+R2  file as you may have many samples. In addition this will make the computation of statistics more straighforward\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs24 \cf11 \cb9 \CocoaLigature0 awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J flash\\n#SBATCH -p workq\\n#SBATCH -t \cf5 2:00:00\cf11 \\n\\n
\fs22 \cf13 \cb10 module load bioinfo\\/FLASH-1.2.6\cf11 \\n"\} \{print "flash -x \cf5 0\cf11  -m \cf5 10\cf11  -M \cf5 300\cf11  -d fastq_merge -o
\fs24 \cf0 \cb1 \CocoaLigature1  "$1"
\fs22 \cf11 \cb10 \CocoaLigature0  "$1"_R1_paired.fastq "$1"_R2_paired.fastq"
\fs24 \cb9 \}' 
\f4\fs26 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 mysamples
\f2\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0  >> flash.sh
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf18 #details on parameters:\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf19 \cb10 \CocoaLigature0 #-x, --max-mismatch-density : Maximum allowed ratio between the number of mismatched base pairs and the overlap length.\
#-m, --min-overlap: minimum required overlap length (bp)\
#-M, --max-overlap : Maximum overlap length expected in approximately 90% of read pairs\
#-d, --output-directory : output directory\
#-o, --output-prefix : Prefix of output files
\f0\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### run script\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 sbatch 
\fs24 \cb9 flash.sh
\fs22 \cb10 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \kerning1\expnd0\expndtw0 \
### store FLASH log file\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 mv slurm-* ./flash.log\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### take a look to statistics to adjust parameters if needed\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 grep "R1_paired\\|Total reads\\|Percent" flash.log |sed 'N;N;s/\\n/ /g'
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### cleaning [if you 
\b \cf8 do not
\b0 \cf2  want to rerun flash]\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 rm 
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 flash
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .sh
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### cleaning [if you 
\b \cf15 do
\b0 \cf2  want to rerun flash]\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 rm 
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 flash
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .sh\
mv fastq_merge ./fastq_merge_\cf5 myparameters\cf11   \cf2 #(e.g. \cf11 mv fastq_merge ./fastq_merge_\cf5 m10\cf14 )\cf11 \
mv flash.log ./flash_\cf5 myparameters\cf12 .log\cf5  \cf2 #(e.g. \cf11 mv flash.log ./flash_\cf5 m10\cf12 .log)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### IF NEEDED : comparison of different runs of flash to adjust parameters\
#example with 
\f2\fs22 \cf20 \cb10 \CocoaLigature0 m=10 \cf14 and\cf20  m=5
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 paste flash_\cf20 m10\cf12 .log\cf20  \cf11 flash_\cf20 m5\cf12 .log\cf11  > flash_comp.log
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs22 \cf8 \cb10 \CocoaLigature0 #Warning! samples should be in the same order in the different files but it is better to double check
\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 awk '\{if ($0~/fastq/ && $2!=$4) \{print $0\}\}' flash_comp.log \cf2 #if you get the prompt back samples were ordered the same way\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 #compare results\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 more flash_comp.log
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### format statistics in a summary table that will be merged with results obtained in the next steps of the workflow \
\pard\pardeftab720\partightenfactor0

\f1\b\fs22 \cf8 \cb10 \CocoaLigature0 #rename your final flash log file as 
\f2\b0 \cf11 flash\cf12 .log
\f1\b \cf8  if case you have performed several rounds of FLASH and a suffix was needed  
\f2\b0 \cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
grep "_R1_paired.fastq" flash\cf12 .log\cf11  |sed s/"\\[FLASH\\]     "//g |sed s/_R1_paired\\.fastq//g > tmp_table_sample\
grep "Total reads:" flash\cf12 .log\cf11  |sed s/"\\[FLASH\\]     Total reads:      "//g > tmp_table_cleanreads\
grep "Combined reads:" flash\cf12 .log\cf11  |sed s/"\\[FLASH\\]     Combined reads:   "//g > tmp_table_mergedreads\
\
paste tmp_table_sample tmp_table_cleanreads tmp_table_mergedreads | awk 'BEGIN\{print "samplecode\\tncleanPFpairedReads_Trimmomatic\\tnmergedPFreads_FLASH"\} \{print $0\}' > 
\f1\b \cf21 flash_table
\f2\b0 \cf11 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # cleaning
\f2\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
rm tmp_table*\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 rm \cf11 \cb10 \CocoaLigature0 *.fastq
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 ### output files of FLASH are stored in a directory called\cf0  
\f2\fs22 fastq_merge
\f0\fs28  \cf2 that is created in datadir\cf0 \
\cf2 ### the merged reads are stored in\cf0  
\fs22 $samplecode.extendedFrags.fastq
\fs28  \cf2 (e.g.: 
\f2\fs22 \cf5 JRAS07930_0104\cf0 .extendedFrags.fastq
\f0\fs28 \cf2 )\cf0 \
\cf2 \
\
### summary of current useful output files\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 fastq_merge/$samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b \cf22 flash_table 
\f2\b0 \cf11 : current version of the follow up table including statistics to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#Keep only full length amplicon\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0

\f1\b\fs22 \cf8 \cb10 \CocoaLigature0 \
#Here I keep only full length amplicons by flagging sequences that start and end with complete primers\
#I use the word "full length amplicon" for the following construction: (ie the sequencing product) ForwardPrimer----target gene-----ReversePrimer\
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf17 \cb8 #Importantly, I am looking for exact macthes between the sequence of the primers and the beginning / end of the sequencing product.
\fs22 \cf8 \cb10 \

\fs24 \cf17 \cb8 #I want to stay on the safest side so I do allow mismatches.
\fs22 \cf8 \cb10 \
\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ### cd to datadir\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 cd fastq_merge\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### remove useless files to keep space\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 rm *.hist *.histogram *.notCombined_*   \cf14 #I stay on the safest side I do not keep reads that were not merged by FLASH\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 ### list input files (<=> reads merged with FLASH)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *.extendedFrags.fastq > myinpufiles
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf8 ###I you did not use the primers provided in the manuscript you need to create your own "primer file" with all possible combinations of linker-forward x linker-reverse primers \
###If you used the leuA primers provided in the manuscript combinations are in the 
\f2\fs22 \cf12 \cb10 \CocoaLigature0 leuA_primers.txt
\f0\fs28 \cf8 \cb1 \CocoaLigature1  file stored in the example directory\
###the bash script (
\f2\fs22 \cf11 \cb10 \CocoaLigature0 mineamplicon.sh
\f0\fs28 \cf8 \cb1 \CocoaLigature1 ) called by the SLURM script is provided in the example directory\
\pard\pardeftab720\partightenfactor0
\cf2 \
### create and execute a first script to generate a SLURM script that contains all cmds required to flag sequences that start with the forward primer and end with the reverse primers\
#the script takes as input, the list of files that contains merged reads (
\f2\fs22 \cf11 \cb10 \CocoaLigature0 myinpufiles)
\f0\fs28 \cf2 \cb1 \CocoaLigature1  + the file that contains all possible combinations of forward+reverse primers (\cf13 ../
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA_primers.txt
\f0\fs28 \cf2 \cb1 \CocoaLigature1 ) + the list of sample codes  (
\f2\fs22 \cf11 \cb10 \CocoaLigature0 ../mysamples
\f0\fs28 \cf2 \cb1 \CocoaLigature1 ) + a suffix that will be used to annotate output sequence files (typically you can use gene name as suffix) (here 
\f2\fs22 \cf20 \cb10 \CocoaLigature0 leuA
\f0\fs28 \cf2 \cb1 \CocoaLigature1 )\
#the script will output a SLURM script 
\f2\fs22 \cf20 \cb10 \CocoaLigature0 $outputsuffix\cf12 _mineamplicon.sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 that needs to be run to grep full length amplicons in all files\
#Note that the script will print in the slurm-* file the different input parameters as a reminder\cf12 \
\cf2 #example for 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA
\f0\fs28 \cf12 \cb1 \CocoaLigature1 \
\cf2 #create script\cf12 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 nano \cf12 mineamplicon.sh
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf0 #-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J \cf12 mineamplicon\cf11 \
#SBATCH -p workq\
#SBATCH -t \cf5 20:00\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf13 ../\cf11 mineamplicon.sh\cf12  \cf11 myinpufiles \cf13 ../\cf5 leuA_primers.txt\cf11  ../mysamples \cf20 leuA  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf0 #-----------------------------------
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 #run script\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 sbatch mineamplicon.sh
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #check outputs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #the output SLURM script will be 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA\cf11 _mineamplicon.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb9 \CocoaLigature0 rm \cf13 ../\cf11 mineamplicon.sh slurm-*.out\cb10 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### execute SLURM script that was generated in the previous step to grep full length amplicons\
\pard\pardeftab720\partightenfactor0

\f1\b\fs22 \cf8 \cb10 \CocoaLigature0 #note that you may edit running time depending on the nb of files you have to process (2h by default).
\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 sbatch \cf5 leuA\cf11 _mineamplicon.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### monitor job(s)\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f1\b \cf8 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #note that this script can endup with a FAILED (exit code=1) status even if everything went right.\
#It is because you may have processed empty files (which is fine) and bash returns an error in that specific case. \
#Nevertheless, it is safer to check that you have at least some non empty files as output to be sure that the script really worked on your data.\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ### count 
\b \ul empty
\b0 \ulnone  outputs to make sure you have at least some non empty files (ie that the script worked)
\f2\fs22 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 for file in *_\cf5 leuA\cf11 ; do if [[ ! -s $file ]]; then echo $file; fi; done |wc -l
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### count outputs = 
\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 leuA\cf11  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 leuA \cf11 |wc -l \cf2 \cb9 #should be equal to the nb of samples\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 rm slurm-*.out\cf5 \
\cf11 rm *_mineamplicon.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### get statistics (nb of sequences that were retained as full amplicons)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 for i in *_\cf5 leuA
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
do\
echo $i >> tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _amplicon_results && grep -c "@" $i 
\f3\fs24 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 >> tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _amplicon_results\cf11 \
done\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' 
\f3\fs24 \cf12 \expnd0\expndtw0\kerning0
tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _amplicon_results > \cf5 leuA\cf12 _amplicon_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf12 \expnd0\expndtw0\kerning0
rm tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _amplicon_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
#check results\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 more \cf5 leuA\cf12 _amplicon_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
### Add results of this step to the previous version of the summary table (
\f1\b\fs22 \cf22 \cb10 \CocoaLigature0 flash_table
\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 )
\f1\b\fs22 \cf22 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 # sort files
\f2\fs22 \cf12 \cb10 \CocoaLigature0 \
awk '\{if(NR>1) \{print\}\}' ../flash_table |sort > flash_table_sorted\
sort \cf5 leuA\cf12 _amplicon_results |sed s/"_\cf5 leuA\cf12 "/""/g > \cf5 leuA\cf12 _amplicon_results_sorted\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # join files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 join -t 
\f4\fs26 \cf23 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,1.3,2.2 \cf12 flash_table_sorted \cf5 leuA\cf12 _amplicon_results_sorted > tmp_\cf5 leuA\cf12 _amplicon_table
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 awk 'BEGIN\{print "samplecode\\tncleanPFpairedReads_Trimmomatic\\tnmergedPFreads_FLASH\\tnFullAmplicons"\} \{print $0\}' \cf12 tmp_\cf5 leuA\cf12 _amplicon_table\cf11  > \cf5 leuA\cf12 _
\f1\b \cf22 amplicon_table
\f2\b0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
# cleaning\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 rm *_sorted tmp_\cf5 leuA\cf12 _amplicon_table\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### summary of current output files (
\f2\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  fastq_merge
\f0\fs24 \cf2 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 _leuA\cf11   : full length amplicon for which the primers used to amplify \cf5 leuA \cf11 were found at both ends (fasta). Note that primers are NOT trimed yet.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 leuA
\f1\b \cf22 _amplicon_table 
\f2\b0 \cf11 : current version of the follow up table including statistics for \cf5 leuA.\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
# final cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 rm myinpufiles
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#Trim primers from amplicons\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf2 \
#Now, we need to trim primers from the 5' and 3' ends of the amplicons.\
\
### cd to datadir (if for some reason you got out)\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 cd fastq_merge\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
### list input files (<=> output from previous step)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *\cf5 _leuA\cf11  > myinpufiles\cf5 _leuA
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
#create script\
#the script takes as input, the list of output files from the previous step + the file that contains all possible combination of forward+reverse primers + a prefix that will be used to name the SLURM script that will be created (typically prefix=gene) \
\pard\pardeftab720\partightenfactor0
\cf8 #the bash script (
\f2\fs22 \cf11 \cb10 \CocoaLigature0 trimprimer.sh
\f0\fs28 \cf8 \cb1 \CocoaLigature1 ) called by the SLURM script is provided in the example directory\
\pard\pardeftab720\partightenfactor0
\cf2 #the script will output a SLURM script 
\f2\fs22 \cf20 \cb10 \CocoaLigature0 $outputprefix\cf12 _trimamplicon.sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 that includes cmds that needs to be run to trim primers in all files\
#Note that the script will print in the slurm-* file the different input parameters as a reminder\cf12 \
\cf2 #example for 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA
\f0\fs28 \cf12 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 nano \cf12 trimprimers.sh
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf0 #-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J \cf12 trimprimers\cf11 \
#SBATCH -p workq\
#SBATCH -t \cf5 20:00\cf11 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf13 ../\cf11 trimprimer.sh\cf12  \cf11 myinpufiles\cf5 _leuA\cf11  \cf13 ../\cf5 leuA_primers.txt\cf11  \cf20 leuA 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf0 #-----------------------------------
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 #run script\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 sbatch trimprimers.sh
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #check outputs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #the output SLURM script will be 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA\cf12 _trimamplicon.sh\cf11 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 rm \cf13 ../\cf12 trimprimer.sh\cf11  slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### execute SLURM script that was generated in the previous step to trim primers from amplicons\
# output filenames will be the same as input filenames\
# 
\f1\b\fs22 \cf8 \cb10 \CocoaLigature0 note that you may edit running time depending on the nb of files you have to process (2h by default).
\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 \
#example for 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
sbatch \cf5 leuA\cf12 _trimamplicon.sh
\f4 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### monitor jobs\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### count outputs = 
\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 leuA\cf11  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 leuA \cf11 |wc -l \cf2 \cb9 #should be equal to the nb of samples +1 (because you have a file called \cf11 \cb10 myinpufiles\cf5 _leuA\cf2 \cb9  ) \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 rm slurm-*.out myinpufiles\cf5 _leuA\
\cf11 rm \cf5 leuA\cf12 _trimamplicon.sh\
rm \cf13 ../\cf5 leuA_primers\cf12 .txt\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### summary of current output files (
\f2\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  fastq_merge
\f0\fs24 \cf2 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 _leuA\cf11   : full length amplicon for which the primers used to amplify \cf5 leuA \cf11 were found at both ends (fasta). Note that primers are trimed.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 leuA
\f1\b \cf22 _amplicon_table 
\f2\b0 \cf11 : current version of the follow up table including statistics for \cf5 leuA.\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#dereplication VSEARCH and clustering SWARM\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0

\f1\b\fs22 \cf8 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f2\b0 \cf14 #Goals:\
#i) dereplication (ie removal of exact duplicates) with VSEARCH (the goal is to make the work of SWARM easier by reducing the nb of sequences that need to be compared)\
#ii) clustering of sequences based on similarity with SWARM\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cd to datadir (if for some reason you got out)\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 cd fastq_merge\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
### convert output of previous step to fasta\
#create script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 nano convert.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J convert \
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\cf11 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 for i in *\cf5 \cb10 \CocoaLigature0 _leuA\cf0 \cb1 \CocoaLigature1 \
do\
awk -F"[: ]" '\{if (/^@/) \{print ">"$5"_"$6"_"$7\} else print $0\}' $i > $i".fasta"\
done\
#-----------------------------------\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #run script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 sbatch convert.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 leuA\cf11 .fasta 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files
\f2\fs22 \cf0   \

\f0\fs28 \cf2 #count output\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *\cf5 _leuA\cf11 .fasta |wc -l \cf2 \cb9 #should be equal to the nb of samples\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 rm convert.sh slurm-*.out\
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### trash original output of 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA\cf2 _mineamplicon.sh
\f0\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 rm *\cf5 \cb10 \CocoaLigature0 _leuA\cf0 \cb1 \CocoaLigature1 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### dereplication (ie removal of exact duplicates) with VSEARCH (the goal is to make the work of SWARM easier by reducing the nb of sequences that need to be compared). \
#A single sequence is retained for each pool of exactly identical sequences. The nb of sequences in each pool is included in sequence headers of output files (size=xx)\
#create script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 nano vsearch.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J vsearch\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf13 module load bioinfo/vsearch-2.6.2\cf11  \cf8 #
\f0\fs28 \cf8 \cb1 \CocoaLigature1 change path to your version of VSEARCH
\f2\fs22 \cf11 \cb10 \CocoaLigature0 \
\
for i in *\cf5 _leuA\cf11 .fasta\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 vsearch \cf11 \cb10 \CocoaLigature0 --derep_fulllength $i --sizeout --fasta_width 0 --output $i".dereplic" \
done\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf18 \cb1 \CocoaLigature1 #details on parameters:\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf19 \cb10 \CocoaLigature0 #--sizeout : include abundance information when relabelling\
#--fasta_width : width of FASTA seq lines, 0 for no wrap (80)\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf0 #-----------------------------------\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #run script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 sbatch vsearch.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f1\b \cf8 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #note that this script can endup with a FAILED (exit code=1) status even if everything went right. \
#It is because you may have processed empty files (which is fine) and vsearch returns an error in that specific case. \
#Nevertheless, it is safer to check that you have at least some non empty files as output to be sure that the script really worked.\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ### count 
\b \ul empty
\b0 \ulnone  outputs to make sure you have at least some non empty files (ie that the script worked)
\f2\fs22 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 for file in *_\cf5 leuA\cf11 .fasta.dereplic; do if [[ ! -s $file ]]; then echo $file; fi; done |wc -l
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 #output = 
\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 leuA\cf11 .fasta.dereplic 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files
\f2\fs22 \cf0  \

\f0\fs28 \cf2 #count output\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 leuA\cf11 .fasta.dereplic |wc -l \cf2 \cb9 #should be equal to the nb of samples\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 rm vsearch.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb9 ###remove sequences with N (required because SWARM crashes when there are N in sequences)\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 \cb1 nano rmseqwithN.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J rmN\
#SBATCH -p workq\
#SBATCH -t \cf5 1:00:00\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb9 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 for i in *\cf5 _leuA\cf11 .fasta.dereplic\
do
\f0\fs28 \cf2 \cb9 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 awk -v RS=">" '!/N/\{printf $0RT\}' $i > $i".noN"\
done\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf14 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm *\cf5 _leuA\cf11 .fasta.dereplic\
rename '.noN' '' *\cf5 _leuA\cf11 .fasta.dereplic.noN\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 #-----------------------------------\cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #run script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 sbatch rmseqwithN.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 leuA\cf11 .fasta.dereplic 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files (ie same as input)\
#cleaning\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 rm rmseqwithN.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\
### clustering with SWARM (sequences are merged into clusters. the parameter 
\b \cf5 d
\b0 \cf2  determines the nb of mutations you tolerate for merging two sequences -note that is not exactly that but it is an approximation of what d is)\
#Outputs contain 1 sequence per cluster (the most frequent one). The total nb of sequences in each cluster (identical sequences + not identical sequences) is included in sequence headers of output files (size=xx)\
#create script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 nano swarm.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J swarm\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf13 module load bioinfo/swarm-2.2.2\cf11   \cf8 #
\f0\fs28 \cb1 \CocoaLigature1 change path to your version of SWARM
\f2\fs22 \cf11 \cb10 \CocoaLigature0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
for i in *\cf5 _leuA\cf11 .fasta.dereplic\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 swarm -w $i".swarmOTU" -z $i -d 
\f1\b \cf24 1
\f2\b0  \cf12 -o\cf24  \cf11 $i".swarmout" \cf12 -l \cf11 $i".swarmlog"  \cf8 #change the value of d if you want. the higher it is the higher is the probablity of clustering paralogs\cf11 \
\pard\pardeftab720\partightenfactor0
done\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf18 \cb1 \CocoaLigature1 \
#details on parameters:\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf19 \cb10 \CocoaLigature0 #-d, resolution <=> ca nb of mutations between pairs of sequences if you increase d you cluster sequences with more differences\
#-l, --log FILENAME                  log to file, not to stderr\
#-o, output result filename\
#-w, write seed seqs with abundances to FASTA\
#-z, abundance annotation in usearch style <=> input file in our case\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf0 #-----------------------------------\cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #run script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 sbatch swarm.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files\
#count outputs\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU |wc -l \cf2 \cb9 #should be equal to the nb of samples
\f0\fs28 \cb1 \CocoaLigature1 \
#cleaning\

\f2\fs22 \cf0 rm swarm.sh slurm-*.out\
rm \cf11 \cb10 \CocoaLigature0 *.swarmout *.swarmlog\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### get statistics\
#create script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 nano getstatswarm.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J statswarm\
#SBATCH -p workq\
#SBATCH -t \cf5 30:00\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf2 #for each sample, get totalNbofsequences, nb of clusters, average nb of sequences in clusters, median nb of sequences in clusters, miniumun nb of sequences in clusters, maximum nb of sequences in clusters\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf11 \cb10 \CocoaLigature0 for i in *_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 echo $i 
\f4\fs26 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 >> 
\f2\fs22 $i".stats" && \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 awk -F";" '\{if (/^>/) \{print $2\}\}' $i\cf25  \cf11 |sed s/"size="/""/g |/home/acruaud/save/programs/get_SumCountMeanMedianMinMax.sh
\f4\fs26 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  >> 
\f2\fs22 $i".stats"
\f4\fs26 \

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 done\
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 \cb1 \CocoaLigature1 #merge all stats in a single file\
\pard\pardeftab720\partightenfactor0

\fs22 \cf11 \cb10 \CocoaLigature0 cat *_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.stats |sed s/"_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU"/""/g > 
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _swarm_results\cf11 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 \cb1 \CocoaLigature1 #create final file
\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' 
\f3\fs24 \cf12 \expnd0\expndtw0\kerning0
tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _swarm_results > \cf5 leuA\cf12 _swarm_results\cf11 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 \cb1 \CocoaLigature1 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf11 \cb10 \CocoaLigature0 rm *_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.stats 
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _swarm_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 #-----------------------------------
\f0\fs28 \cf2 \
#run script\

\f2\fs22 \cf0 sbatch getstatswarm.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #check results\
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf2 #columns = samplecode, totalNbofsequences, nb of clusters, average nb of sequences in clusters, median nb of sequences in clusters, miniumun nb of sequences in clusters, maximum nb of sequences in clusters\
\pard\pardeftab720\partightenfactor0

\fs22 \cf12 \cb10 \CocoaLigature0 more \cf5 leuA\cf12 _swarm_results\cf11 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #cleaning\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 rm getstatswarm.sh slurm-*.out \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### merge statistics with 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA
\f1\b \cf22 _amplicon_table\

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 # sort files
\f2\fs22 \cf12 \cb10 \CocoaLigature0 \
awk '\{if(NR>1) \{print\}\}' \cf5 leuA
\f1\b \cf22 _amplicon_table
\f2\b0 \cf12  |sort > \cf5 leuA
\f1\b \cf22 _amplicon_table
\f2\b0 \cf12 _sorted\
sort \cf5 leuA\cf12 _swarm_results > \cf5 leuA\cf12 _swarm_results_sorted\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # join files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 join -t 
\f4\fs26 \cf23 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,1.3,1.4,2.2,2.3,2.4,2.5,2.6,2.7 \cf5 leuA
\f1\b \cf22 _amplicon_table
\f2\b0 \cf12 _sorted \cf5 leuA\cf12 _swarm_results_sorted > tmp_\cf5 leuA\cf12 _swarm_table\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 awk 'BEGIN\{print "samplecode\\tncleanPFpairedReads_Trimmomatic\\tnmergedPFreads_FLASH\\tnFullAmplicons\\tninputSeq_Swarm\\tnclusters_Swarm\\tAverageNSeqinClusters_Swarm\\tMedianNSeqinClusters_Swarm\\tMinNSeqinClusters_Swarm\\tMaxNSeqinClusters_Swarm"\} \{print $0\}' \cf12 tmp_\cf5 leuA\cf12 _swarm_table \cf11 > \cf5 leuA
\f1\b \cf22 _swarm_table
\f2\b0 \cf2 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # cleaning\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 rm *_sorted tmp_\cf5 leuA\cf12 _swarm_table\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### summary of current output files (
\f2\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  fastq_merge
\f0\fs24 \cf2 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 _leuA\cf11 .fasta  : full length amplicon for which the primers used to amplify \cf5 leuA \cf11 were found at both ends (fasta). Note that primers are trimed.\
$samplecode_\cf5 leuA\cf11 .fasta.dereplic : after dereplication with VSEARCH (fasta). Note that nb of replicates (size) are included in headers
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU : after clustering with SWARM
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA
\f1\b \cf22 _swarm_table 
\f2\b0 \cf11 : current version of the follow up table including statistics for \cf5 leuA.\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#selection of clusters based on the nb of sequences they contain\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf2 \
#Goal : keep only clusters of sequences that contain \cf5 minseq\cf2  sequences or more, \cf5 minseq \cf2 being fixed by the user\
\pard\pardeftab720\partightenfactor0

\b \cf8 #NOTE THAT If you have included EmptyWell controls, \cf5 minseq \cf8 should be chosen  > to the maximum value of 
\f2\b0\fs22 \cf11 \cb10 \CocoaLigature0 MaxNSeqinClusters_Swarm 
\f0\b\fs28 \cf8 \cb1 \CocoaLigature1 over all controls.
\b0 \cf2 \

\b \cf8 #NOTE THAT you may test different value of \cf5 minseq\cf8 . You may even keep all sequences to have a complete overview (ie you could spot contaminants/rare variants etc.).\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \
### cd to datadir (if for some reason you got out)\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 cd fastq_merge\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
#create script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 nano selection.sh  \cf8 #!!! ATTENTION set a value for 
\f0\fs28 \cf5 minseq 
\f2\fs22 \cf8 in script !!!  (We used 10 for the manuscript)\cf0 \
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J select\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #set threshold value <=> nb of sequences from which a cluster should be kept\
#if minseq is set to 10 clusters with 10 and more sequences will be kept.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 declare -i \cf12 minseq
\f1\b =\cf5 XX  \cf8 ## !!! set the value of minseq here -- e.g. minseq=10 DO NOT INCLUDE SPACES BEFORE OF AFTER THE "=" sign -- !!! ###
\f2\b0 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #merge headers and sequences on the same line for future selection\cf11 \
for i in *\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 awk ' \{if (/^>/) \{print $1"\'a3"\} else print $0\}' \cf11 \cb10 \CocoaLigature0 $i\cf12 \cb1 \CocoaLigature1  |tr "\\n" " " |sed s/" "/""/g |sed s/">"/"\\n>"/g |sed s/"\'a3"/" "/g |awk '\{if (NR>1) \{print\}\}' |sed s/"size="/""/g > "tmp_"\cf11 \cb10 \CocoaLigature0 $i\
done\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #selection\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 for i in tmp_*\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU\
do\cf2 \
\cf11 awk -F";" -v thr=$minseq '\{if ($2>=thr\cf12 ) \{print\}\}' $i > $i".select"\
done\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #convert back to fasta + modify headers to include "_size"\
\pard\pardeftab720\partightenfactor0
\cf12 for i in \cf11 tmp_*\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU.select\cf12 \
do\
awk -F";" '\{print $1"_size"$2"\\n"$3\}' $i > $i".def"\
done\cf2  \
#rename extra space in front of sequence\
\cf12 sed -i s/" "/""/g \cf11 tmp_*\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU.select.def\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #rename final files\
\pard\pardeftab720\partightenfactor0
\cf12 rename 'tmp_' '' \cf11 tmp_*\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU.select.def\
rename '.def' '' *.select.def\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm tmp_*\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU tmp_*\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU.select
\f0\fs28 \cf18 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 #-----------------------------------\cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #run script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 sbatch selection.sh \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.select 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files\
#count output\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.select |wc -l \cf2 \cb9 #should be equal to the nb of samples
\f0\fs28 \cb1 \CocoaLigature1 \
#cleaning\

\f2\fs22 \cf0 rm selection.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\
### get statistics\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 for i in *_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.select\
do\
echo $i >> $i".stats" && grep -c ">" $i >> $i".stats"\
done
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 cat *_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.select.stats > 
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _swarmselect_results\cf11 \
\
\cf0 \cb1 \CocoaLigature1 awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' 
\f3\fs24 \cf12 \expnd0\expndtw0\kerning0
tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _swarmselect_results |sed s/"\cf11 _\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.select"/""/g\cf12  > \cf5 leuA\cf12 _swarmselect_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
rm *_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.select.stats 
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _swarmselect_results\cf11 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #check results\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 more \cf5 leuA\cf12 _swarmselect_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### merge statistics with 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA
\f1\b \cf22 _swarm_table\

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 # sort files
\f2\fs22 \cf12 \cb10 \CocoaLigature0 \
awk '\{if(NR>1) \{print\}\}' \cf5 leuA
\f1\b \cf22 _swarm_table
\f2\b0 \cf12  |sort > \cf5 leuA
\f1\b \cf22 _swarm_table
\f2\b0 \cf12 _sorted\
sort \cf5 leuA\cf12 _swarmselect_results > \cf5 leuA\cf12 _swarmselect_results_sorted\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # join files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 join -t 
\f4\fs26 \cf23 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,1.10,2.2 \cf5 leuA
\f1\b \cf22 _swarm_table
\f2\b0 \cf12 _sorted \cf5 leuA\cf12 _swarmselect_results_sorted > tmp_\cf5 leuA\cf12 _swarmselect_table\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 awk 'BEGIN\{print "samplecode\\tncleanPFpairedReads_Trimmomatic\\tnmergedPFreads_FLASH\\tnFullAmplicons\\tninputSeq_Swarm\\tnclusters_Swarm\\tAverageNSeqinClusters_Swarm\\tMedianNSeqinClusters_Swarm\\tMinNSeqinClusters_Swarm\\tMaxNSeqinClusters_Swarm\\tnclusters_Swarm_FilterMinseq"\} \{print $0\}' \cf12 tmp_\cf5 leuA\cf12 _swarmselect_table \cf11 > \cf5 leuA
\f1\b \cf22 _swarmselect_table
\f2\b0 \cf2 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # cleaning\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 rm *_sorted tmp_\cf5 leuA\cf12 _swarmselect_table\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### summary of current output files (
\f2\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  fastq_merge
\f0\fs24 \cf2 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 _leuA\cf11 .fasta  : full length amplicon for which the primers used to amplify \cf5 leuA \cf11 were found at both ends (fasta). Note that primers are trimed.\
$samplecode_\cf5 leuA\cf11 .fasta.dereplic : after dereplication with VSEARCH (fasta). Note that nb of replicates (size) are included in headers
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU : after clustering with SWARM
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.select : after clustering with SWARM and after selection of clusters based on a minimum nb of sequences\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 leuA
\f1\b \cf22 _swarmselect_table 
\f2\b0 \cf11 : current version of the follow up table including statistics for \cf5 leuA.\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#removal of potential chimera    \cb9 \
#-----------------------------------------\cb1 -------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf2 \
#Chimeras are sequences formed from two or more biological sequences joined together. \
#Amplicons with chimeric sequences can form during PCR. \
#
\b \cf8 Chimeras can be common in amplicon sequencing especially when closely related sequences are amplified..
\b0 \cf2 .\
#for more infos you may take a look to this page (https://drive5.com/usearch/manual/chimeras.html) and this paper (\cf26 \expnd0\expndtw0\kerning0
\ul \ulc26 https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3044863/)\cf2 \kerning1\expnd0\expndtw0 \ulnone \
\
\pard\pardeftab720\partightenfactor0

\b \cf8 #NOTE : keep in mind that it is extremely difficult to automatically distinguish chimeras from correct sequences
\b0 \cf2 \
\
#algorithms divide each query sequence into four segments and look for similarity of each segment to sequences in the set of potential parents. \
#There is two way of detecting chimeras\
#i) de novo : all sequences are potential parents but In this case, parent sequences should be more abundant than their chimeras because the parent amplicons will have undergone more rounds of amplification. \
#ii) by using a reference databse : parent sequences are listed in this reference database (in this case relative abundances are not used)\
\
\pard\pardeftab720\partightenfactor0
\cf8 #\ul a key parameter for the de novo search is 
\b abskew
\b0 \ulnone  which (to be short) controls the relative abundance of parent and chimeric sequences. For example, if abskew= 2.0, it means that the parents should be at least 2 times more abundant than their chimera. \cf2 \
\cf8 #Here is an important note from the developper of USEARCH : "Based on recent results (not yet written up), I believe that with abskew=2 there are many more false positive chimera detections. Perfect chimera detection is not possible due to unbiquitous fake models (see UCHIME2 paper), but with abskew=16 I believe there is a much more reasonable balance between false positives and false negatives." \cf2 #Note that Input order matters for chimera detection and sequences need to be sorted by decreasing abundance\
\
\pard\pardeftab720\partightenfactor0

\b \cf8 #All this to say that you may either miss chimera or discard real sequences. So when it is possible you should use a reference database that lists \ul ALL \ulnone your parent sequences (fasta format); and; of course a double check is preferable\
#My suggestions are (when possible)\
#i) to take a look to the sequences that are flagged as chimeras by USEARCH to be sure you did not exclude valid sequences \
#ii) to critically examine final sequences at the very end of the worflow to be sure that all chimeras have been removed.
\b0 \cf2 \
\
\
### cd to datadir (if for some reason you got out)\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 cd fastq_merge\
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### So, you have two \ul mutually exclusive\ulnone  options for the script : either you do have or you do not have a reference database.\
#In this case I used a reference database composed of all leuA alleles available from 
\f5\fs24 \cf0 http://pubmlst.org/xfastidiosa/
\f0\fs28 \cf2  + our synthetic target <=> the 
\f2\fs22 \cf11 \cb10 \CocoaLigature0 leuA_referenceDB.fas 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 file stored in the example directory\
\
\
\
#create script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 nano usearch_chimeraREF.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J chimera\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf13 \cb9 module load bioinfo/usearch11.0.667 \cf11 \cb10  \cf8 #
\f0\fs28 \cb1 \CocoaLigature1 change path to your version of USEARCH
\f2\fs22 \cf12 \cb9 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf2 \
##look for chimeras\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
for i in *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select\
do\
usearch \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 -uchime2_ref\cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0  $i -db \cf13 ../\cf5 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 leuA_referenceDB.fas\cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0  -uchimeout $i".log" -chimeras $i".chimera" -strand plus -mode \cf5 specific
\f1\b  
\f2\b0 \cf11 \
done\
\pard\pardeftab720\partightenfactor0
\cf2 ##remove chimeras from initial files\
#list of initial files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 ls *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select > myinitialfiles\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 #list of chimeras\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 for i in *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select.chimera\
do\
grep ">" $i > $i".list"\
done\
\pard\pardeftab720\partightenfactor0
\cf2 #put headers and seq on the same line in initial files for future grep \cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cb10 for i in \cb9 *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select\cb10 \
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 awk ' \{if (/^>/) \{print $1"\'a3"\} else print $0\}' \cf11 \cb10 \CocoaLigature0 $i\cf12 \cb1 \CocoaLigature1  |tr "\\n" " " |sed s/" "/""/g |sed s/">"/"\\n>"/g |sed s/"\'a3"/" "/g |awk '\{if (NR>1) \{print\}\}' > "tmp_"\cf11 \cb10 \CocoaLigature0 $i\
done\
\pard\pardeftab720\partightenfactor0
\cf2 \cb9 #prepare and execute cmds to remove chimeras from initial files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 awk '\{print "grep -v -f "$0".chimera.list tmp_"$0" > "$0".remchimera"\}' \cb9 myinitialfiles |bash\
\pard\pardeftab720\partightenfactor0
\cf2 #convert final files back to fasta\
\pard\pardeftab720\partightenfactor0
\cf12 \cb10 for i in \cf11 \cb9 *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select.remchimera\cf12 \cb10 \
do\
awk -F" " '\{print $1"\\n"$2\}' $i > $i".def"\
done\cf2  \
\pard\pardeftab720\partightenfactor0
\cf2 \cb9 #cleaning\
\cf11 rm *.chimera.list\
rm *.log\
rm myinitialfiles\
rm tmp_*\
rm *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select.remchimera\
\cf2 #rename final files\
\cf11 rename '.def' '' *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select.remchimera.def\
\cf2 #unwrap *.chimera files
\f0\fs28 \cf18 \cb1 \CocoaLigature1 \
\pard\pardeftab720\sl280\partightenfactor0

\f3\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
for i in 
\f2\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0 *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select.chimera
\f3\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
do\
awk '/^>/ \{printf("\\n%s\\n",$0);next; \} \{ printf("%s",$0);\}  END \{printf("\\n");\}' < 
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $i \cb9 > \cb10 $i".unwrap"\
done\cb9 \
\pard\pardeftab720\partightenfactor0
\cf2 \CocoaLigature1 #remove the first, empty line, in output unwrapped files
\f0\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \CocoaLigature0 sed -i '1d' *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select.chimera.unwrap\
\pard\pardeftab720\partightenfactor0
\cf2 #cleaning \
\pard\pardeftab720\partightenfactor0
\cf12 rm \cf11 *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select.chimera
\f0\fs28 \cf18 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf2 \cb9 \CocoaLigature0 #rename final files\
\cf11 rename '.unwrap' '' *_\cf5 \cb10 leuA\cf11 \cb9 .fasta.dereplic.swarmOTU.select.chimera.unwrap\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf18 \cb1 \CocoaLigature1 \
#details on parameters for usearch:\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f1\b\fs22 \cf19 \cb10 \CocoaLigature0 #-uchime2_ref
\f2\b0  : detect chimeras based on a reference database\
#-db : reference database (fasta format)\
#-strand plus : mandatory even if searching on both strands is not supported\
#-mode : see https://drive5.com/usearch/manual/cmd_uchime2_ref.html for the different options\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 #-----------------------------------\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #run script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 sbatch usearch_chimeraREF.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f1\b \cf8 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #note that this script can endup with a FAILED (exit code=1) status even if everything went right. \
#It is because you may have processed empty files (which is fine) and usearch returns an error in that specific case. \
#Nevertheless, it is safer to check that you have at least some non empty files as output to be sure that the script really worked.\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ### count 
\b \ul empty
\b0 \ulnone  outputs to make sure you have at least some non empty files (ie that the script worked)
\f2\fs22 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 for file in *_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.select.remchimera; do if [[ ! -s $file ]]; then echo $file; fi; done |wc -l
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
#outputs = \
#
\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #sequences that remain after filtering of chimeras\
#
\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.chimera 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #sequences that were identified as chimeras\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 # count outputs\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera |wc -l \cf2 \cb9 #should be equal to the nb of samples unless you have samples for which you had no input sequences (\cf11 \cb10 grep -A 1 "Fatal" slurm-\cf13 \cb10 XXXXX\cf11 \cb10 .out)
\f0\fs28 \cf12 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 rm usearch_chimeraREF.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
### get statistics\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 for i in *_\cf5 leuA\cf11 .fasta.dereplic.swarmOTU.select.remchimera\
do\
echo $i >> $i".stats" && grep -c ">" $i >> $i".stats"\
done
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 cat *_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera.stats > 
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _swarmselectremchimera_results\cf11 \cb10 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' 
\f3\fs24 \cf12 \expnd0\expndtw0\kerning0
tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _swarmselectremchimera_results |sed s/"\cf11 \cb10 _\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera"/""/g\cf12 \cb10  > \cf5 leuA\cf12 _swarmselectremchimera_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf11 \cb10 rm *_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera.stats 
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f2\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 leuA\cf12 _swarmselectremchimera_results\cf11 \cb10 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #check results\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 more \cf5 leuA\cf12 _swarmselectremchimera_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### merge statistics with 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA
\f1\b \cf22 _swarmselect_table\

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 # sort files
\f2\fs22 \cf12 \cb10 \CocoaLigature0 \
awk '\{if(NR>1) \{print\}\}' \cf5 leuA
\f1\b \cf22 _swarmselect_table
\f2\b0 \cf12  |sort > \cf5 leuA
\f1\b \cf22 _swarmselect_table
\f2\b0 \cf12 _sorted\
sort \cf5 leuA\cf12 _swarmselectremchimera_results > \cf5 leuA\cf12 _swarmselectremchimera_results_sorted\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # join files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 join -t 
\f4\fs26 \cf23 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,1.10,1.11,2.2 \cf5 leuA_
\f1\b \cf22 swarmselect_table
\f2\b0 \cf12 _sorted \cf5 leuA\cf12 _swarmselectremchimera_results_sorted > tmp_\cf5 leuA\cf12 _swarmselectremchimera_table\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 awk 'BEGIN\{print "samplecode\\tncleanPFpairedReads_Trimmomatic\\tnmergedPFreads_FLASH\\tnFullAmplicons\\tninputSeq_Swarm\\tnclusters_Swarm\\tAverageNSeqinClusters_Swarm\\tMedianNSeqinClusters_Swarm\\tMinNSeqinClusters_Swarm\\tMaxNSeqinClusters_Swarm\\tnclusters_Swarm_FilterMinseq\\tnclusters_Swarm_FilterMinseqAndChimera"\} \{print $0\}' \cf12 tmp_\cf5 leuA\cf12 _swarmselectremchimera_table \cf11 > \cf5 leuA
\f1\b \cf22 _swarmselectremchimera_table
\f2\b0 \cf2 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # cleaning\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 \cb10 \CocoaLigature0 rm *_sorted tmp_\cf5 leuA\cf12 _swarmselectremchimera_table\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
# FYI print samples for which chimeras were identified (but this can be read from the 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA
\f1\b \cf22 _swarmselectremchimera_table 
\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 file)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 awk -F"\\t" '\{if($11>$12) \{print\}\}' leuA_swarmselectremchimera_table
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### summary of current output files (
\f2\fs22 \cb10 \CocoaLigature0 datadir\cf11 \cb10  \cf2 \cb10 =\cf11 \cb10  fastq_merge
\f0\fs24 \cf2 \cb10 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 \cb10 _leuA\cf11 \cb10 .fasta  : full length amplicon for which the primers used to amplify \cf5 \cb10 leuA \cf11 \cb10 were found at both ends (fasta). Note that primers are trimed.\
$samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic : after dereplication with VSEARCH (fasta). Note that nb of replicates (size) are included in headers
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU : after clustering with SWARM
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select : after clustering with SWARM and after selection of clusters based on a minimum nb of sequences\
$samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.chimera : sequences that were identified as chimeras\
$samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera : after clustering with SWARM; after selection of clusters based on a minimum nb of sequences; after filtering out chimeras\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \cb10 leuA
\f1\b \cf22 _swarmselectremchimera_table 
\f2\b0 \cf11 current version of the follow up table including statistics for \cf5 leuA.\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#ADD SAMPLE CODE + CLUSTER ID TO FASTA HEADERS\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf8 \cb10 \CocoaLigature0 #Goal : add sample code to fasta headers + add clusterID (cluster1 for the cluster with the highest nb of seq, cluster2 for the 2nd cluster etc.) + keep nb of seq in each cluster\
#note that if several clusters contain the same nb of samples they are arbitraly ranked as we must have a different header for each consensus \
#final headers <=> >$samplecode_gene_cluster$i_size$i\
\pard\pardeftab720\partightenfactor0
\cf27 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #create script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 nano addsampletofastaheaders.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J editheaders\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #merge headers and sequences on the same line for future selection\cf11 \
for i in *\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU.select.remchimera\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 awk ' \{if (/^>/) \{print $1"\'a3"\} else print $0\}' \cf11 \cb10 \CocoaLigature0 $i\cf12 \cb1 \CocoaLigature1  |tr "\\n" " " |sed s/" "/""/g |sed s/">"/"\\n>"/g |sed s/"\'a3"/" "/g |awk '\{if (NR>1) \{print\}\}' > "tmp_"\cf11 \cb10 \CocoaLigature0 $i\
done\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \cb10 #rank clusters by nb of sequences\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 for i in tmp_*\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU.select.remchimera\
do\
awk '\{split($1,toto,"_") ;print toto[4]";"$0\}' $i |sed s/"size"/""/ |sort -n -r > "tmp_"$i\
done\cf2 \
#remove 1st col\
\cf11 for i in tmp_tmp_*\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU.select.remchimera\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 awk -F";" '\{print $2\}' $i > \cf12 \cb1 \CocoaLigature1 "tmp_"\cf11 \cb10 \CocoaLigature0 $i\
done\cf2 \
#add sample code + cluster ID to headers\
\cf11 for i in tmp_tmp_tmp_*\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU.select.remchimera\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 awk -F"_" '\{gsub(">","",$0) split(FILENAME,file,".") ; print ">"file[1]"_cluster"NR"_"$4\}' $i \cf12 \cb1 \CocoaLigature1 |sed s/"tmp_tmp_tmp_"/""/g > "tmp_"\cf11 \cb10 \CocoaLigature0 $i\cb9 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cb10 done\cf5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #convert back to fasta\cf5 \
\pard\pardeftab720\partightenfactor0
\cf12 for i in \cf11 \cb10 tmp_tmp_tmp_tmp_*\cf5 \cb10 _leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera\cf12 \cb10 \
do\
awk -F" " '\{print $1"\\n"$2\}' $i > $i".def"\
done\cf2  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #rename final files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rename 'tmp_tmp_tmp_tmp_' '' *\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU.select.remchimera.def\cf5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm tmp_*\cf5 _leuA\cf11 .fasta.dereplic.swarmOTU.select.remchimera\cf5 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 #-----------------------------------\cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #run script\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 sbatch addsampletofastaheaders.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f2\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera.def 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files
\f2\fs22 \cf0  \

\f0\fs28 \cf2 #with headers <=> 
\f2\fs22 \cf11 \cb10 \CocoaLigature0 >$samplecode_\cf5 \cb10 leuA\cf11 \cb10 _cluster$i_size$i\cf5 \cb10 \

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #count outputs\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera.def |wc -l \cf2 \cb9 #should be equal to the nb of samples unless you have samples for which you had no input sequences
\f0\fs28 \cf12 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 rm addsampletofastaheaders.sh slurm-*.out\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \cb10 \CocoaLigature0 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### summary of current output files (
\f2\fs22 \cb10 \CocoaLigature0 datadir\cf11 \cb10  \cf2 \cb10 =\cf11 \cb10  fastq_merge
\f0\fs24 \cf2 \cb10 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 \cb10 _leuA\cf11 \cb10 .fasta  : full length amplicon for which the primers used to amplify \cf5 \cb10 leuA \cf11 \cb10 were found at both ends (fasta). Note that primers are trimed.\
$samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic : after dereplication with VSEARCH (fasta). Note that nb of replicates (size) are included in headers
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU : after clustering with SWARM
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select : after clustering with SWARM and after selection of clusters based on a minimum nb of sequences\
$samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.chimera : sequences that were identified as chimeras\
$samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera : after clustering with SWARM; after selection of clusters based on a minimum nb of sequences; after filtering out chimeras\
$samplecode_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera.def : after clustering with SWARM; after selection of clusters based on a minimum nb of sequences; after filtering out chimeras; after renaming of fasta headers to include sample code\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \cb10 leuA
\f1\b \cf22 _swarmselectremchimera_table 
\f2\b0 \cf11 current version of the follow up table including statistics for \cf5 leuA.\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f2\fs22 \cf5 \cb10 \CocoaLigature0 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #------------------------------------------------------------------------------------------------------------\
#CREATE ONE SEQUENCE FILE FOR ALL SAMPLES\
#------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #It will be easier to have only 1 file per gene for downstream analyses\
\
#concatenation of all sequences for all samples\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 cat \cf11 \cb10 \CocoaLigature0 *_\cf5 \cb10 leuA\cf11 \cb10 .fasta.dereplic.swarmOTU.select.remchimera.def > \cf5 \cb10 leuA\cf11 \cb10 _allseqdef.fasta\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #create datadir for downstream analyses\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 mkdir postprocess\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 #move sequences to this datadir\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \CocoaLigature0 mv *_allseqdef.fasta \cf0 \cb1 \CocoaLigature1 postprocess\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 #cd to datadir for downstream analyses\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 cd postprocess\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 #count Nb of cluster per sample (this will be the starting point of a new follow up table). output = 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 \cb10 _allseqdef.fasta.countseq
\f0\fs28 \cf4 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 for i in *.fasta\
do\
grep ">" \cf11 \cb10 \CocoaLigature0 $i\cf0 \cb1 \CocoaLigature1  |awk -F"_" '\{print $1"_"$2\}' |sort |uniq -c |sed s/" "/""/g |awk -F">" 'BEGIN\{print "samplecode\\tNbclusterInitial"\} \{print $2"\\t"$1\}' > $i".countseq"\
done
\f0\fs28 \cf4 \

\f2\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 #create follow up table(s) ; output = 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 $gene
\f1\b \cf22 _countinitial_table
\f2\b0 \cf0 \cb1 \CocoaLigature1 \
rename '\cf11 \cb10 \CocoaLigature0 _allseqdef.fasta.countseq' '_countinitial_table' *.countseq\cf0 \cb1 \CocoaLigature1 \
\

\f0\fs28 \cf4 #check results\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 more *\cf11 \cb10 \CocoaLigature0 _countinitial_table\cf0 \cb1 \CocoaLigature1 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### summary of current output files (
\f2\fs22 \cb10 \CocoaLigature0 datadir\cf11 \cb10  \cf2 \cb10 =\cf11 \cb10  \cf0 \cb1 \CocoaLigature1 postprocess
\f0\fs24 \cf2 \cb10 \CocoaLigature0 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA\cf11 \cb10 _allseqdef.fasta : initial clusters = sequences for all samples\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \cb10 leuA
\f1\b \cf22 _countinitial_table 
\f2\b0 \cf11 : current version of the follow up table including statistics for \cf5 leuA.\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #------------------------------------------------------------------------------------------------------------\
#ALIGN SEQUENCES\
#------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #cd to datadir if you got out for whatever reason\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 cd postprocess
\f0\fs28 \cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f4\fs24 \cf12 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 ##### alignment of sequences (MAFFT)\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 \expnd0\expndtw0\kerning0
ls *\cf12 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .fasta\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  > myfiles.txt   \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### \expnd0\expndtw0\kerning0
create a big cmd file. 
\f2\fs22 \cf8 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 (
\f0\fs28 \cb1 \CocoaLigature1 change path to your version of MAFFT. attention use a \\ in front of each /)\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 awk '\{print "#!\\/bin\\/bash\\n#SBATCH -p workq\\n#SBATCH -t \cf5 10:00\cf11 \\n\\n\cf13 module load bioinfo\\/\cb10 mafft-7.313\cf11 \\n\\nmafft\cb9  "$1" > "$1".al"\}' 
\f0\fs28 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 myfiles.txt
\f2\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0  >> tmp_cmd_mafft\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### \expnd0\expndtw0\kerning0
split the cmd file into as many script as the nb of genes (scripts will be named mafft_1.sh to mafft_xxxx.sh) [here we have only leuA so only 1 script is generated)\
\pard\pardeftab720\sl280\partightenfactor0

\f3\fs24 \cf12 awk '/
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #!
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 /\{filename="mafft_"NR".sh"\}; \{print >filename\}' 
\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 tmp_cmd_mafft
\f3\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### \expnd0\expndtw0\kerning0
run scripts\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 for i in mafft_*.sh\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 do\
sbatch $i\
done
\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### monitor job \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 \cb10 username\cf11 \cb10 "\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### count output\cf0 \
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 ls *.al |wc -l
\f0\fs28    \cf2 #should return the nb of genes!\
# \expnd0\expndtw0\kerning0
cleaning\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm mafft_*.sh \cb9 tmp_cmd_mafft\cb10  myfiles.txt slurm-*
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ###outputs :\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _*.al  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #aligned sequences\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#POST PROCESSING WITH GENEIOUS\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf2 \
upload the 
\f2\fs22 \cf5 \cb10 \CocoaLigature0 leuA\cf11 \cb10 _allseqdefandref.fasta 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 in Geneious\
remove non target sequences\
\pard\pardeftab720\partightenfactor0

\f2\fs22 \cf0 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
}